#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MenuOrder.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="WebMenuOrder")]
	public partial class dbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertTypeAccount(TypeAccount instance);
    partial void UpdateTypeAccount(TypeAccount instance);
    partial void DeleteTypeAccount(TypeAccount instance);
    partial void InsertBill(Bill instance);
    partial void UpdateBill(Bill instance);
    partial void DeleteBill(Bill instance);
    partial void InsertDetailBill(DetailBill instance);
    partial void UpdateDetailBill(DetailBill instance);
    partial void DeleteDetailBill(DetailBill instance);
    partial void InsertFood(Food instance);
    partial void UpdateFood(Food instance);
    partial void DeleteFood(Food instance);
    partial void InsertFoodCategory(FoodCategory instance);
    partial void UpdateFoodCategory(FoodCategory instance);
    partial void DeleteFoodCategory(FoodCategory instance);
    partial void InsertFoodTable(FoodTable instance);
    partial void UpdateFoodTable(FoodTable instance);
    partial void DeleteFoodTable(FoodTable instance);
    partial void InsertSlider(Slider instance);
    partial void UpdateSlider(Slider instance);
    partial void DeleteSlider(Slider instance);
    partial void InsertStaff(Staff instance);
    partial void UpdateStaff(Staff instance);
    partial void DeleteStaff(Staff instance);
    #endregion
		
		public dbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
        public dbDataContext() :
base(global::System.Configuration.ConfigurationManager.ConnectionStrings["WebMenuOrderConnectionString1"].ConnectionString, mappingSource)
        {
            OnCreated();
        }
        public dbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<TypeAccount> TypeAccounts
		{
			get
			{
				return this.GetTable<TypeAccount>();
			}
		}
		
		public System.Data.Linq.Table<Bill> Bills
		{
			get
			{
				return this.GetTable<Bill>();
			}
		}
		
		public System.Data.Linq.Table<DetailBill> DetailBills
		{
			get
			{
				return this.GetTable<DetailBill>();
			}
		}
		
		public System.Data.Linq.Table<Food> Foods
		{
			get
			{
				return this.GetTable<Food>();
			}
		}
		
		public System.Data.Linq.Table<FoodCategory> FoodCategories
		{
			get
			{
				return this.GetTable<FoodCategory>();
			}
		}
		
		public System.Data.Linq.Table<FoodTable> FoodTables
		{
			get
			{
				return this.GetTable<FoodTable>();
			}
		}
		
		public System.Data.Linq.Table<Slider> Sliders
		{
			get
			{
				return this.GetTable<Slider>();
			}
		}
		
		public System.Data.Linq.Table<Staff> Staffs
		{
			get
			{
				return this.GetTable<Staff>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Username;
		
		private string _Password;
		
		private System.Nullable<int> _IdTypeAccount;
		
		private string _DisplayName;
		
		private string _Address;
		
		private string _Email;
		
		private EntitySet<Bill> _Bills;
		
		private EntitySet<Staff> _Staffs;
		
		private EntityRef<TypeAccount> _TypeAccount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnIdTypeAccountChanging(System.Nullable<int> value);
    partial void OnIdTypeAccountChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public Account()
		{
			this._Bills = new EntitySet<Bill>(new Action<Bill>(this.attach_Bills), new Action<Bill>(this.detach_Bills));
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			this._TypeAccount = default(EntityRef<TypeAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdTypeAccount", DbType="Int")]
		public System.Nullable<int> IdTypeAccount
		{
			get
			{
				return this._IdTypeAccount;
			}
			set
			{
				if ((this._IdTypeAccount != value))
				{
					if (this._TypeAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTypeAccountChanging(value);
					this.SendPropertyChanging();
					this._IdTypeAccount = value;
					this.SendPropertyChanged("IdTypeAccount");
					this.OnIdTypeAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(50)")]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(100)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Bill", Storage="_Bills", ThisKey="Id", OtherKey="IdAccount")]
		public EntitySet<Bill> Bills
		{
			get
			{
				return this._Bills;
			}
			set
			{
				this._Bills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Staff", Storage="_Staffs", ThisKey="Id", OtherKey="IdAccount")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeAccount_Account", Storage="_TypeAccount", ThisKey="IdTypeAccount", OtherKey="IdAccount", IsForeignKey=true)]
		public TypeAccount TypeAccount
		{
			get
			{
				return this._TypeAccount.Entity;
			}
			set
			{
				TypeAccount previousValue = this._TypeAccount.Entity;
				if (((previousValue != value) 
							|| (this._TypeAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeAccount.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._TypeAccount.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._IdTypeAccount = value.IdAccount;
					}
					else
					{
						this._IdTypeAccount = default(Nullable<int>);
					}
					this.SendPropertyChanged("TypeAccount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TypeAccount")]
	public partial class TypeAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdAccount;
		
		private string _TypeAccount1;
		
		private EntitySet<Account> _Accounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdAccountChanging(int value);
    partial void OnIdAccountChanged();
    partial void OnTypeAccount1Changing(string value);
    partial void OnTypeAccount1Changed();
    #endregion
		
		public TypeAccount()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdAccount", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdAccount
		{
			get
			{
				return this._IdAccount;
			}
			set
			{
				if ((this._IdAccount != value))
				{
					this.OnIdAccountChanging(value);
					this.SendPropertyChanging();
					this._IdAccount = value;
					this.SendPropertyChanged("IdAccount");
					this.OnIdAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="TypeAccount", Storage="_TypeAccount1", DbType="NVarChar(125) NOT NULL", CanBeNull=false)]
		public string TypeAccount1
		{
			get
			{
				return this._TypeAccount1;
			}
			set
			{
				if ((this._TypeAccount1 != value))
				{
					this.OnTypeAccount1Changing(value);
					this.SendPropertyChanging();
					this._TypeAccount1 = value;
					this.SendPropertyChanged("TypeAccount1");
					this.OnTypeAccount1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeAccount_Account", Storage="_Accounts", ThisKey="IdAccount", OtherKey="IdTypeAccount")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.TypeAccount = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.TypeAccount = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bill")]
	public partial class Bill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdBill;
		
		private int _IdAccount;
		
		private string _Status;
		
		private System.DateTime _TimeCome;
		
		private System.Nullable<System.DateTime> _TimeOut;
		
		private int _IdTable;
		
		private string _Discount;
		
		private string _PaymentMethod;
		
		private System.Nullable<double> _TotalMoney;
		
		private System.Nullable<int> _IdStaff;
		
		private EntitySet<DetailBill> _DetailBills;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<FoodTable> _FoodTable;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdBillChanging(int value);
    partial void OnIdBillChanged();
    partial void OnIdAccountChanging(int value);
    partial void OnIdAccountChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnTimeComeChanging(System.DateTime value);
    partial void OnTimeComeChanged();
    partial void OnTimeOutChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeOutChanged();
    partial void OnIdTableChanging(int value);
    partial void OnIdTableChanged();
    partial void OnDiscountChanging(string value);
    partial void OnDiscountChanged();
    partial void OnPaymentMethodChanging(string value);
    partial void OnPaymentMethodChanged();
    partial void OnTotalMoneyChanging(System.Nullable<double> value);
    partial void OnTotalMoneyChanged();
    partial void OnIdStaffChanging(System.Nullable<int> value);
    partial void OnIdStaffChanged();
    #endregion
		
		public Bill()
		{
			this._DetailBills = new EntitySet<DetailBill>(new Action<DetailBill>(this.attach_DetailBills), new Action<DetailBill>(this.detach_DetailBills));
			this._Account = default(EntityRef<Account>);
			this._FoodTable = default(EntityRef<FoodTable>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdBill", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdBill
		{
			get
			{
				return this._IdBill;
			}
			set
			{
				if ((this._IdBill != value))
				{
					this.OnIdBillChanging(value);
					this.SendPropertyChanging();
					this._IdBill = value;
					this.SendPropertyChanged("IdBill");
					this.OnIdBillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdAccount", DbType="Int NOT NULL")]
		public int IdAccount
		{
			get
			{
				return this._IdAccount;
			}
			set
			{
				if ((this._IdAccount != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAccountChanging(value);
					this.SendPropertyChanging();
					this._IdAccount = value;
					this.SendPropertyChanged("IdAccount");
					this.OnIdAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeCome", DbType="DateTime NOT NULL")]
		public System.DateTime TimeCome
		{
			get
			{
				return this._TimeCome;
			}
			set
			{
				if ((this._TimeCome != value))
				{
					this.OnTimeComeChanging(value);
					this.SendPropertyChanging();
					this._TimeCome = value;
					this.SendPropertyChanged("TimeCome");
					this.OnTimeComeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeOut", DbType="DateTime")]
		public System.Nullable<System.DateTime> TimeOut
		{
			get
			{
				return this._TimeOut;
			}
			set
			{
				if ((this._TimeOut != value))
				{
					this.OnTimeOutChanging(value);
					this.SendPropertyChanging();
					this._TimeOut = value;
					this.SendPropertyChanged("TimeOut");
					this.OnTimeOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdTable", DbType="Int NOT NULL")]
		public int IdTable
		{
			get
			{
				return this._IdTable;
			}
			set
			{
				if ((this._IdTable != value))
				{
					if (this._FoodTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTableChanging(value);
					this.SendPropertyChanging();
					this._IdTable = value;
					this.SendPropertyChanged("IdTable");
					this.OnIdTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount", DbType="NVarChar(50)")]
		public string Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentMethod", DbType="NVarChar(50)")]
		public string PaymentMethod
		{
			get
			{
				return this._PaymentMethod;
			}
			set
			{
				if ((this._PaymentMethod != value))
				{
					this.OnPaymentMethodChanging(value);
					this.SendPropertyChanging();
					this._PaymentMethod = value;
					this.SendPropertyChanged("PaymentMethod");
					this.OnPaymentMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalMoney", DbType="Float")]
		public System.Nullable<double> TotalMoney
		{
			get
			{
				return this._TotalMoney;
			}
			set
			{
				if ((this._TotalMoney != value))
				{
					this.OnTotalMoneyChanging(value);
					this.SendPropertyChanging();
					this._TotalMoney = value;
					this.SendPropertyChanged("TotalMoney");
					this.OnTotalMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdStaff", DbType="Int")]
		public System.Nullable<int> IdStaff
		{
			get
			{
				return this._IdStaff;
			}
			set
			{
				if ((this._IdStaff != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdStaffChanging(value);
					this.SendPropertyChanging();
					this._IdStaff = value;
					this.SendPropertyChanged("IdStaff");
					this.OnIdStaffChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bill_DetailBill", Storage="_DetailBills", ThisKey="IdBill", OtherKey="IdBill")]
		public EntitySet<DetailBill> DetailBills
		{
			get
			{
				return this._DetailBills;
			}
			set
			{
				this._DetailBills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Bill", Storage="_Account", ThisKey="IdAccount", OtherKey="Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Bills.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Bills.Add(this);
						this._IdAccount = value.Id;
					}
					else
					{
						this._IdAccount = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FoodTable_Bill", Storage="_FoodTable", ThisKey="IdTable", OtherKey="IdTable", IsForeignKey=true)]
		public FoodTable FoodTable
		{
			get
			{
				return this._FoodTable.Entity;
			}
			set
			{
				FoodTable previousValue = this._FoodTable.Entity;
				if (((previousValue != value) 
							|| (this._FoodTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FoodTable.Entity = null;
						previousValue.Bills.Remove(this);
					}
					this._FoodTable.Entity = value;
					if ((value != null))
					{
						value.Bills.Add(this);
						this._IdTable = value.IdTable;
					}
					else
					{
						this._IdTable = default(int);
					}
					this.SendPropertyChanged("FoodTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Bill", Storage="_Staff", ThisKey="IdStaff", OtherKey="IdStaff", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Bills.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Bills.Add(this);
						this._IdStaff = value.IdStaff;
					}
					else
					{
						this._IdStaff = default(Nullable<int>);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DetailBills(DetailBill entity)
		{
			this.SendPropertyChanging();
			entity.Bill = this;
		}
		
		private void detach_DetailBills(DetailBill entity)
		{
			this.SendPropertyChanging();
			entity.Bill = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DetailBill")]
	public partial class DetailBill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdDetailBill;
		
		private int _IdBill;
		
		private int _IdFood;
		
		private int _Quality;
		
		private System.Nullable<double> _PriceDetailBill;
		
		private EntityRef<Bill> _Bill;
		
		private EntityRef<Food> _Food;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdDetailBillChanging(int value);
    partial void OnIdDetailBillChanged();
    partial void OnIdBillChanging(int value);
    partial void OnIdBillChanged();
    partial void OnIdFoodChanging(int value);
    partial void OnIdFoodChanged();
    partial void OnQualityChanging(int value);
    partial void OnQualityChanged();
    partial void OnPriceDetailBillChanging(System.Nullable<double> value);
    partial void OnPriceDetailBillChanged();
    #endregion
		
		public DetailBill()
		{
			this._Bill = default(EntityRef<Bill>);
			this._Food = default(EntityRef<Food>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdDetailBill", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdDetailBill
		{
			get
			{
				return this._IdDetailBill;
			}
			set
			{
				if ((this._IdDetailBill != value))
				{
					this.OnIdDetailBillChanging(value);
					this.SendPropertyChanging();
					this._IdDetailBill = value;
					this.SendPropertyChanged("IdDetailBill");
					this.OnIdDetailBillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdBill", DbType="Int NOT NULL")]
		public int IdBill
		{
			get
			{
				return this._IdBill;
			}
			set
			{
				if ((this._IdBill != value))
				{
					if (this._Bill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdBillChanging(value);
					this.SendPropertyChanging();
					this._IdBill = value;
					this.SendPropertyChanged("IdBill");
					this.OnIdBillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdFood", DbType="Int NOT NULL")]
		public int IdFood
		{
			get
			{
				return this._IdFood;
			}
			set
			{
				if ((this._IdFood != value))
				{
					if (this._Food.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdFoodChanging(value);
					this.SendPropertyChanging();
					this._IdFood = value;
					this.SendPropertyChanged("IdFood");
					this.OnIdFoodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quality", DbType="Int NOT NULL")]
		public int Quality
		{
			get
			{
				return this._Quality;
			}
			set
			{
				if ((this._Quality != value))
				{
					this.OnQualityChanging(value);
					this.SendPropertyChanging();
					this._Quality = value;
					this.SendPropertyChanged("Quality");
					this.OnQualityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceDetailBill", DbType="Float")]
		public System.Nullable<double> PriceDetailBill
		{
			get
			{
				return this._PriceDetailBill;
			}
			set
			{
				if ((this._PriceDetailBill != value))
				{
					this.OnPriceDetailBillChanging(value);
					this.SendPropertyChanging();
					this._PriceDetailBill = value;
					this.SendPropertyChanged("PriceDetailBill");
					this.OnPriceDetailBillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bill_DetailBill", Storage="_Bill", ThisKey="IdBill", OtherKey="IdBill", IsForeignKey=true)]
		public Bill Bill
		{
			get
			{
				return this._Bill.Entity;
			}
			set
			{
				Bill previousValue = this._Bill.Entity;
				if (((previousValue != value) 
							|| (this._Bill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bill.Entity = null;
						previousValue.DetailBills.Remove(this);
					}
					this._Bill.Entity = value;
					if ((value != null))
					{
						value.DetailBills.Add(this);
						this._IdBill = value.IdBill;
					}
					else
					{
						this._IdBill = default(int);
					}
					this.SendPropertyChanged("Bill");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_DetailBill", Storage="_Food", ThisKey="IdFood", OtherKey="IdFood", IsForeignKey=true)]
		public Food Food
		{
			get
			{
				return this._Food.Entity;
			}
			set
			{
				Food previousValue = this._Food.Entity;
				if (((previousValue != value) 
							|| (this._Food.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Food.Entity = null;
						previousValue.DetailBills.Remove(this);
					}
					this._Food.Entity = value;
					if ((value != null))
					{
						value.DetailBills.Add(this);
						this._IdFood = value.IdFood;
					}
					else
					{
						this._IdFood = default(int);
					}
					this.SendPropertyChanged("Food");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Food")]
	public partial class Food : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdFood;
		
		private string _NameFood;
		
		private int _IdFC;
		
		private System.Nullable<int> _Quantity;
		
		private string _Status;
		
		private int _Price;
		
		private string _anh;
		
		private EntitySet<DetailBill> _DetailBills;
		
		private EntityRef<FoodCategory> _FoodCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdFoodChanging(int value);
    partial void OnIdFoodChanged();
    partial void OnNameFoodChanging(string value);
    partial void OnNameFoodChanged();
    partial void OnIdFCChanging(int value);
    partial void OnIdFCChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnanhChanging(string value);
    partial void OnanhChanged();
    #endregion
		
		public Food()
		{
			this._DetailBills = new EntitySet<DetailBill>(new Action<DetailBill>(this.attach_DetailBills), new Action<DetailBill>(this.detach_DetailBills));
			this._FoodCategory = default(EntityRef<FoodCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdFood", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdFood
		{
			get
			{
				return this._IdFood;
			}
			set
			{
				if ((this._IdFood != value))
				{
					this.OnIdFoodChanging(value);
					this.SendPropertyChanging();
					this._IdFood = value;
					this.SendPropertyChanged("IdFood");
					this.OnIdFoodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameFood", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NameFood
		{
			get
			{
				return this._NameFood;
			}
			set
			{
				if ((this._NameFood != value))
				{
					this.OnNameFoodChanging(value);
					this.SendPropertyChanging();
					this._NameFood = value;
					this.SendPropertyChanged("NameFood");
					this.OnNameFoodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdFC", DbType="Int NOT NULL")]
		public int IdFC
		{
			get
			{
				return this._IdFC;
			}
			set
			{
				if ((this._IdFC != value))
				{
					if (this._FoodCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdFCChanging(value);
					this.SendPropertyChanging();
					this._IdFC = value;
					this.SendPropertyChanged("IdFC");
					this.OnIdFCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_anh", DbType="NVarChar(50)")]
		public string anh
		{
			get
			{
				return this._anh;
			}
			set
			{
				if ((this._anh != value))
				{
					this.OnanhChanging(value);
					this.SendPropertyChanging();
					this._anh = value;
					this.SendPropertyChanged("anh");
					this.OnanhChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_DetailBill", Storage="_DetailBills", ThisKey="IdFood", OtherKey="IdFood")]
		public EntitySet<DetailBill> DetailBills
		{
			get
			{
				return this._DetailBills;
			}
			set
			{
				this._DetailBills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FoodCategory_Food", Storage="_FoodCategory", ThisKey="IdFC", OtherKey="IdFC", IsForeignKey=true)]
		public FoodCategory FoodCategory
		{
			get
			{
				return this._FoodCategory.Entity;
			}
			set
			{
				FoodCategory previousValue = this._FoodCategory.Entity;
				if (((previousValue != value) 
							|| (this._FoodCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FoodCategory.Entity = null;
						previousValue.Foods.Remove(this);
					}
					this._FoodCategory.Entity = value;
					if ((value != null))
					{
						value.Foods.Add(this);
						this._IdFC = value.IdFC;
					}
					else
					{
						this._IdFC = default(int);
					}
					this.SendPropertyChanged("FoodCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DetailBills(DetailBill entity)
		{
			this.SendPropertyChanging();
			entity.Food = this;
		}
		
		private void detach_DetailBills(DetailBill entity)
		{
			this.SendPropertyChanging();
			entity.Food = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FoodCategory")]
	public partial class FoodCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdFC;
		
		private string _FoodCategory1;
		
		private EntitySet<Food> _Foods;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdFCChanging(int value);
    partial void OnIdFCChanged();
    partial void OnFoodCategory1Changing(string value);
    partial void OnFoodCategory1Changed();
    #endregion
		
		public FoodCategory()
		{
			this._Foods = new EntitySet<Food>(new Action<Food>(this.attach_Foods), new Action<Food>(this.detach_Foods));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdFC", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdFC
		{
			get
			{
				return this._IdFC;
			}
			set
			{
				if ((this._IdFC != value))
				{
					this.OnIdFCChanging(value);
					this.SendPropertyChanging();
					this._IdFC = value;
					this.SendPropertyChanged("IdFC");
					this.OnIdFCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="FoodCategory", Storage="_FoodCategory1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FoodCategory1
		{
			get
			{
				return this._FoodCategory1;
			}
			set
			{
				if ((this._FoodCategory1 != value))
				{
					this.OnFoodCategory1Changing(value);
					this.SendPropertyChanging();
					this._FoodCategory1 = value;
					this.SendPropertyChanged("FoodCategory1");
					this.OnFoodCategory1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FoodCategory_Food", Storage="_Foods", ThisKey="IdFC", OtherKey="IdFC")]
		public EntitySet<Food> Foods
		{
			get
			{
				return this._Foods;
			}
			set
			{
				this._Foods.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Foods(Food entity)
		{
			this.SendPropertyChanging();
			entity.FoodCategory = this;
		}
		
		private void detach_Foods(Food entity)
		{
			this.SendPropertyChanging();
			entity.FoodCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FoodTable")]
	public partial class FoodTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdTable;
		
		private string _Status;
		
		private EntitySet<Bill> _Bills;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdTableChanging(int value);
    partial void OnIdTableChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public FoodTable()
		{
			this._Bills = new EntitySet<Bill>(new Action<Bill>(this.attach_Bills), new Action<Bill>(this.detach_Bills));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdTable", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdTable
		{
			get
			{
				return this._IdTable;
			}
			set
			{
				if ((this._IdTable != value))
				{
					this.OnIdTableChanging(value);
					this.SendPropertyChanging();
					this._IdTable = value;
					this.SendPropertyChanged("IdTable");
					this.OnIdTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FoodTable_Bill", Storage="_Bills", ThisKey="IdTable", OtherKey="IdTable")]
		public EntitySet<Bill> Bills
		{
			get
			{
				return this._Bills;
			}
			set
			{
				this._Bills.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.FoodTable = this;
		}
		
		private void detach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.FoodTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Slider")]
	public partial class Slider : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _maHinh;
		
		private string _anh;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmaHinhChanging(int value);
    partial void OnmaHinhChanged();
    partial void OnanhChanging(string value);
    partial void OnanhChanged();
    #endregion
		
		public Slider()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maHinh", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int maHinh
		{
			get
			{
				return this._maHinh;
			}
			set
			{
				if ((this._maHinh != value))
				{
					this.OnmaHinhChanging(value);
					this.SendPropertyChanging();
					this._maHinh = value;
					this.SendPropertyChanged("maHinh");
					this.OnmaHinhChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_anh", DbType="NVarChar(125) NOT NULL", CanBeNull=false)]
		public string anh
		{
			get
			{
				return this._anh;
			}
			set
			{
				if ((this._anh != value))
				{
					this.OnanhChanging(value);
					this.SendPropertyChanging();
					this._anh = value;
					this.SendPropertyChanged("anh");
					this.OnanhChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Staff")]
	public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdStaff;
		
		private System.Nullable<int> _IdAccount;
		
		private string _NameStaff;
		
		private int _NumberPhone;
		
		private EntitySet<Bill> _Bills;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdStaffChanging(int value);
    partial void OnIdStaffChanged();
    partial void OnIdAccountChanging(System.Nullable<int> value);
    partial void OnIdAccountChanged();
    partial void OnNameStaffChanging(string value);
    partial void OnNameStaffChanged();
    partial void OnNumberPhoneChanging(int value);
    partial void OnNumberPhoneChanged();
    #endregion
		
		public Staff()
		{
			this._Bills = new EntitySet<Bill>(new Action<Bill>(this.attach_Bills), new Action<Bill>(this.detach_Bills));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdStaff", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdStaff
		{
			get
			{
				return this._IdStaff;
			}
			set
			{
				if ((this._IdStaff != value))
				{
					this.OnIdStaffChanging(value);
					this.SendPropertyChanging();
					this._IdStaff = value;
					this.SendPropertyChanged("IdStaff");
					this.OnIdStaffChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdAccount", DbType="Int")]
		public System.Nullable<int> IdAccount
		{
			get
			{
				return this._IdAccount;
			}
			set
			{
				if ((this._IdAccount != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAccountChanging(value);
					this.SendPropertyChanging();
					this._IdAccount = value;
					this.SendPropertyChanged("IdAccount");
					this.OnIdAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameStaff", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NameStaff
		{
			get
			{
				return this._NameStaff;
			}
			set
			{
				if ((this._NameStaff != value))
				{
					this.OnNameStaffChanging(value);
					this.SendPropertyChanging();
					this._NameStaff = value;
					this.SendPropertyChanged("NameStaff");
					this.OnNameStaffChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberPhone", DbType="Int NOT NULL")]
		public int NumberPhone
		{
			get
			{
				return this._NumberPhone;
			}
			set
			{
				if ((this._NumberPhone != value))
				{
					this.OnNumberPhoneChanging(value);
					this.SendPropertyChanging();
					this._NumberPhone = value;
					this.SendPropertyChanged("NumberPhone");
					this.OnNumberPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Bill", Storage="_Bills", ThisKey="IdStaff", OtherKey="IdStaff")]
		public EntitySet<Bill> Bills
		{
			get
			{
				return this._Bills;
			}
			set
			{
				this._Bills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Staff", Storage="_Account", ThisKey="IdAccount", OtherKey="Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._IdAccount = value.Id;
					}
					else
					{
						this._IdAccount = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
	}
}
#pragma warning restore 1591
